image: docker:latest  # Use a Docker image that has Docker pre-installed

services:
  - docker:dind  # Docker-in-Docker service to run Docker commands

stages:
  - build
  - deploy

build:
  stage: build
  before_script:
    - echo "Logging into GitLab Container Registry..."
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker --version  # Check Docker version to verify it's working
    - echo "Building Docker image..."
    - docker build -t registry.gitlab.com/dayn08/mytestwebsite .
    - echo "Pushing Docker image to GitLab Container Registry..."
    - docker push registry.gitlab.com/dayn08/mytestwebsite
  only:
    - main

deploy:
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - echo $SSH_PRIVATE_KEY | tr -d '\r' > ~/.ssh/test.pem
    - chmod 400 ~/.ssh/test.pem
  script:
    # Stop and remove the existing container, pull and run the new image
    - ssh -i ~/.ssh/test.pem ubuntu@54.251.195.21 "
        docker ps -q --filter 'ancestor=registry.gitlab.com/dayn08/mytestwebsite' | xargs -r docker stop && 
        docker ps -a -q --filter 'ancestor=registry.gitlab.com/dayn08/mytestwebsite' | xargs -r docker rm && 
        docker pull registry.gitlab.com/dayn08/mytestwebsite && 
        docker run -d -p 8080:80 registry.gitlab.com/dayn08/mytestwebsite"
  only:
    - main